(load "dataValidation.lisp")
(load "textFile.lisp")
(defvar *occupied-slots* 0)
(defvar *max-slots* 30)
(defvar *cars-list* '()) 

(defclass VEHICLE ()
  ((brand :accessor VEHICLE-brand)
   (registration :accessor VEHICLE-registration)
   (colour :accessor VEHICLE-colour)
   (owner-name :accessor VEHICLE-owner-name)
   (owner-surname :accessor VEHICLE-owner-surname)
   (subscription :accessor VEHICLE-subscription)
   (subscription-time :accessor VEHICLE-subscription-time))) ; in hours


(defun main ()
  (format t "~A[H~@*~A[J" #\escape)
    (when (probe-file "cars.txt")
    (setq *cars-list* (load-list-from-file "cars.txt"))
    (setq *occupied-slots*  (length *cars-list*)))
      (block main-loop
        (loop
        (format t "~%------------------ MENU ------------------~%")
        (format t "1. Dodaj auto~%")
        (format t "2. Usuń auto~%")
        (format t "3. Przedłuż abonament~%")
        (format t "4. Wyświetl listę aut~%")
        (format t "5. Wyjście~%")
        (format t "------------------------------------------~%")
          (force-output *query-io*)
          (let ((choice (int-validation 1 5 "Wybierz opcję: ")))
            (cond
              ((= choice 1) (add-car))
              ((= choice 2) (delete-car))
              ((= choice 3) (extend-subscription))
              ((= choice 4) (show))
              ((= choice 5) (exit-program) (return-from main-loop)))))))

(defun exit-program ()
  (let ((choice (string-validation 1 "Czy chcesz zapisać zmiany? (T/N): ")))
    (if (equal choice "T")
        (progn
          (save-autos-to-file "cars.txt" *cars-list*)
          (format t "Zmiany zostały zapisane~%"))
        (format t "Zmiany nie zostały zapisane~%"))))
        
(defun add-car ()
  (format t "~A[H~@*~A[J" #\escape)
  (if (< *occupied-slots* *max-slots*)
      (progn
        (setq *occupied-slots* (incf *occupied-slots*))
        (let ((*auto* (make-instance 'VEHICLE)))
          (setf (VEHICLE-brand *auto*) (string-validation 2 "Podaj markę auta: "))
          (setf (VEHICLE-registration *auto*) (string-validation 2 "Podaj rejestrację auta: "))
          (setf (VEHICLE-colour *auto*) (string-validation 2 "Podaj kolor auta: "))
          (setf (VEHICLE-owner-name *auto*) (string-validation 2 "Podaj imię właściciela auta: "))
          (setf (VEHICLE-owner-surname *auto*) (string-validation 2 "Podaj nazwisko właściciela auta: "))
          (setf (VEHICLE-subscription-time *auto*) (int-validation 0 100 "Podaj długość abonamentu (w godzinach): "))
          (if (> (VEHICLE-subscription-time *auto*) 0)
              (setf (VEHICLE-subscription *auto*) T)
              (setf (VEHICLE-subscription *auto*) NIL))
          (setq *cars-list* (append *cars-list* (list *auto*)))
          ))
    (print "Brak wolnych miejsc na parkingu")))

(defun delete-car ()
  (format t "~A[H~@*~A[J" #\escape)
  (display-list-compact)
  (let ((index 0))
    (setf index (int-validation 1 (length *cars-list*) "Podaj indeks auta, które chcesz usunąć: "))
    (setf *cars-list* (delete (nth (1- index) *cars-list*) *cars-list*))
          (decf *occupied-slots*)
    )
  (values)) 

(defun extend-subscription ()
  (format t "~A[H~@*~A[J" #\escape)
  (display-list-compact)
  (let ((index 0))
    (force-output *query-io*)
    (setf index (int-validation 1 (length *cars-list*) "Podaj indeks auta, którego abonament chcesz przedłużyć: "))
    (setf (VEHICLE-subscription-time (nth (1- index) *cars-list*)) (+ (VEHICLE-subscription-time (nth (1- index) *cars-list*)) (int-validation 0 100 "Podaj o ile godzin chcesz przedłużyć abonament: ")))))

(defun display-car (auto)
  (format t "Marka: ~a~%" (VEHICLE-brand auto))
  (format t "Rejestracja: ~a~%" (VEHICLE-registration auto))
  (format t "Kolor: ~a~%" (VEHICLE-colour auto))
  (format t "Imię właściciela: ~a~%" (VEHICLE-owner-name auto))
  (format t "Nazwisko właściciela: ~a~%" (VEHICLE-owner-surname auto))
  (format t "Abonament: ~a~%" (if (VEHICLE-subscription auto) "Tak" "Nie"))
  (format t "Długość abonamentu: ~a godzin~%" (VEHICLE-subscription-time auto)))

(defun display-cars-list ()
  (format t "~A[H~@*~A[J" #\escape)
  (format t "Liczba dostępnych miejsc na parkingu: ~a~%" (- *max-slots* *occupied-slots*))
  (format t "Zawartość listy aut:~%")

  (dolist (auto *cars-list*)
    (format t "----------------------------~%")
    (display-car auto))

  (format t "----------------------------~%"))

(defun display-list-compact ()
  (format t "~A[H~@*~A[J" #\escape)
  (format t "Liczba dostępnych miejsc na parkingu: ~a~%" (- *max-slots* *occupied-slots*))
  (format t "Zawartość listy aut:~%")

  (loop for (auto index) in (loop for auto in *cars-list* for i from 1 collect (list auto i))
    do (format t "~d. Marka: ~a, Rejestracja: ~a, Kolor: ~a, Właściciel: ~a ~a, Abonament: ~a, Długość abonamentu (w godzinach): ~a~%"
                index
                (VEHICLE-brand auto)
                (VEHICLE-registration auto)
                (VEHICLE-colour auto)
                (VEHICLE-owner-name auto)
                (VEHICLE-owner-surname auto)
                (if (VEHICLE-subscription auto) "Tak" "Nie")
                (VEHICLE-subscription-time auto)))
  (format t "----------------------------~%"))

(defun display-sorted-list ()
  (format t "~A[H~@*~A[J" #\escape)
    (let ((sorted-list (sort (copy-list *cars-list*) #'(lambda (a b) (< (VEHICLE-subscription-time a) (VEHICLE-subscription-time b))))))
      (format t "Liczba dostępnych miejsc na parkingu: ~a~%" (- *max-slots* *occupied-slots*))
      (format t "Zawartość listy aut:~%")
      (dolist (auto sorted-list)
        (format t "----------------------------~%")
        (display-car auto))
      (format t "----------------------------~%")))
            
(defun show ()
  (let ((choice 0))
    (format t "~%")
    (format t "1. Wyświetl listę aut w pierwotnej kolejności~%")
    (format t "2. Wyświetl listę aut posortowaną po długości abonamentu~%")
    (setf choice (int-validation 1 2 "Wybierz opcję: "))
    (cond
      ((= choice 1) (display-cars-list))
      ((= choice 2) (display-sorted-list)))))


(main)